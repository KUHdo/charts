# Default values for kuhdo-app.
# This is a YAML-formatted file.

# Environments descriptions
# enable only one of those
tags:
  production: false
  staging: false
  dynamic: false
  local: false

# deployment replicaCount of pod
replicaCount: 1
replicaMaxSurge: 1
replicamaxUnavailable: 50%

# meta data for selectors
nameOverride: "kuhdo-webapp"
fullnameOverride: "kuhdo-webapp"

# pod container configuration
containers:
  # name of the container
  bundle:
    web:
      # image and version of the container
      repository: kuhdo/web
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
      # live- and readiness probe is only set  if
      # the container has a port list entry
      port: 80
      portName: http
    app:
      repository: kuhdo/app
      pullPolicy: Always
      tag: "1.4.2"
      port: 9000
      portName: fpm
      args: "prod"
  queue:
    repository: kuhdo/app
    pullPolicy: IfNotPresent
    tag: "1.4.2"
    args: "queue"
  cron:
    repository: kuhdo/app
    pullPolicy: IfNotPresent
    tag: "1.4.2"
    args: "scheduler"
  websocket:
    repository: kuhdo/app
    pullPolicy: IfNotPresent
    tag: "1.4.2"
    port: 6001
    portName: websocket
    args: "websockets"


# Configmap for laravel app container
dotenv:
  APP_DEBUG: "false"
  APP_ENV: "production"
  APP_LOG_LEVEL: "debug"
  APP_LOG_CHANNEL: "errorlog"
  APP_NAME: "KUHdo GmbH"
  APP_URL: "http://portal.kuhdo.de"
  BROADCAST_DRIVER: "redis"
  CACHE_DRIVER: "redis"
  QUEUE_DRIVER: "redis"
  SESSION_DRIVER: "redis"
  SESSION_DOMAIN: ".portal.kuhdo.de"
  SESSION_CONNECTION: "redis"
  DB_CONNECTION: "mariadb"
  DB_HOST: "database-svc"
  DB_PORT: 3306
  REDIS_HOST: "redis-svc"
  REDIS_PORT: "6379"
  REDIS_CLIENT: "phpredis"
  MAIL_MAILER: "mailgun"
  MAIL_HOST: "api.eu.mailgun.org"
  MAIL_NAME: "KUHdo"
  MAIL_PORT: 587
  MAIL_USERNAME: "portal@email.kuhdo.de"
  MAIL_FROM_ADDRESS: "no-reply@kuhdo.de"
  MAIL_ENCRYPTION: "tls"
  MAILGUN_DOMAIN: "email.kuhdo.de"
  MAILGUN_ENDPOINT: "api.eu.mailgun.net"
  TELESCOPE_REQUEST_WATCHER: "false"
  TELESCOPE_ENABLED: "false"
  EEX_SFTP_HOST: "sftp.datasource.eex-group.com"
  TRUST_PROXY: "*"
  PUSHER_ENDPOINT_SCHEME: "https"
  PUSHER_APP_ID:
  PUSHER_APP_KEY:
  PUSHER_FORCE_TLS: "true"
  ECHO_ENCRYPTED: "true"

# Secrets for the laravel app container
secrets:
  webapp:
    # APP_KEY should be filled for environments staging and production
    # in a dynamic environment the APP_KEY should be empty to be generated
    # via template: {{ include laravel.APP_KEY }}
    APP_KEY:
    EEX_SFTP_PASSWORD: supersecret
    EEX_SFTP_REMOTE_PATH: /F:/EEX_Production/master/market_data/agricultural
    EEX_SFTP_USERNAME: EEX_6..
    LOG_SLACK_WEBHOOK_URL: supersecret
    MAILGUN_SECRET: key-a05395e...
    MAIL_PASSWORD: test123
    SLACK_WEBHOOK_URL: supersecret
    PUSHER_APP_SECRET: pushersecret
  database:
    MYSQL_DATABASE: homestead
    MYSQL_USER: homestead
    MYSQL_PASSWORD: secret
    MYSQL_ROOT_PASSWORD: supersecret
    MARIADB_GALERA_MARIABACKUP_PASSWORD: backmeup
  redis:
    # if empty it gets generated
    password:

# docker registry credentials to be created regcred
imageCredentials:
  # registry host address
  registry: docker.io
  # registry username
  username: dockerhubuser
  # Recommended to use an access key
  password: 7a..
  # registry e-mail address
  email: dev@kuhdo.de

#  Map of pull secrets if there are different for the images
imagePullSecrets:
  - name: regcred

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podSecurityContext:
  fsGroup: 1000
  #fsGroupChangePolicy: "OnRootMismatch"

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
      - ALL
  #readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
     kubernetes.io/ingress.class: "traefik-cert-manager"
     kubernetes.io/router.entrypoints: "websecure"
     kubernetes.io/router.tls: "true"
  hosts:
    web:
      name: web
      host: dev.kuhdo.local
      paths: [/]
      port: http
    websocket:
      name: websocket
      host: ws.dev.kuhdo.local
      paths: [/]
      port: websocket
  tls: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Dependency values
database:
  enabled: true
  existingSecretName: "kuhdo-webapp"

mariadb-galera:
  nameOverride: database
  fullnameOverride: database
  service:
    type: ClusterIP
  db:
    user: homestead
    # password: secret
    name: homestead
  galera:
    bootstrap:
      forceSafeToBootstrap: true
  existingSecret: kuhdo-webapp-mariadb-galera-creds

redis:
  nameOverride: redis
  fullnameOverride: redis
  service:
    annotations: { }
  serviceType: ClusterIP
  # password: testing
  existingSecret: kuhdo-webapp-redis
  securityContext:
    enabled: false
  ## Cluster settings
  cluster:
    enabled: true
    slaveCount: 2
  metrics:
    enabled: false
    # resources: {}
    # podAnnotations: {}
    # targetServiceAnnotations:
    #   prometheus.io/scrape: "true"
    #   prometheus.io/port: "9121"

  ##
  ## Redis Master parameters
  ##
  master:
    ## Use password authentication
    port: 6379
    ## Redis Master pod annotations
    podAnnotations: { }
    ## Redis Master Service properties
    service:
      ##  Redis Master Service type
      type: NodePort
      annotations: { }

  ##
  ## Redis Slave properties
  ## Note: serviceType and service are mandatory parameters
  ## The rest of the parameters, if undefined, will inherit those declared in Redis Master
  ##
  slave:
    ## Slave Service properties
    service:
      ## Redis Slave Service type
      type: NodePort
      annotations: { }
      loadBalancerIP:
